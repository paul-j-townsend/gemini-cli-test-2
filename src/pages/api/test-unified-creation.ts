import { NextApiRequest, NextApiResponse } from 'next';
import { supabaseAdmin } from '../../lib/supabase-admin';
import { quizService } from '@/services/quizService';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { action } = req.body;

  try {
    if (action === 'create_unified_entity') {
      return await createUnifiedPodcastQuizEntity(req, res);
    } else if (action === 'test_relationship') {
      return await testPodcastQuizRelationship(req, res);
    } else {
      return res.status(400).json({ error: 'Invalid action' });
    }
  } catch (error) {
    console.error('Unified creation test error:', error);
    return res.status(500).json({
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
}

async function createUnifiedPodcastQuizEntity(req: NextApiRequest, res: NextApiResponse) {
  const transaction = await supabaseAdmin.rpc('begin_transaction');\n  
  try {\n    // Step 1: Create the quiz first\n    const quizData = {\n      title: 'Test Unified Quiz',\n      description: 'This quiz was created as part of a unified podcast-quiz entity',\n      category: 'test',\n      pass_percentage: 75,\n      total_questions: 2,\n      is_active: true\n    };\n\n    const { data: quiz, error: quizError } = await supabaseAdmin\n      .from('vsk_quizzes')\n      .insert(quizData)\n      .select()\n      .single();\n\n    if (quizError) {\n      throw new Error(`Failed to create quiz: ${quizError.message}`);\n    }\n\n    // Step 2: Create the podcast episode with the quiz_id\n    const episodeData = {\n      title: 'Test Unified Podcast Episode',\n      description: 'This episode was created as part of a unified podcast-quiz entity',\n      audio_src: '/audio/walkalone.mp3',\n      full_audio_src: '/audio/walkalone.mp3',\n      episode_number: 99,\n      slug: 'test-unified-episode',\n      is_published: true,\n      published_at: new Date().toISOString(),\n      quiz_id: quiz.id // Required - enforces one-to-one relationship\n    };\n\n    const { data: episode, error: episodeError } = await supabaseAdmin\n      .from('vsk_podcast_episodes')\n      .insert(episodeData)\n      .select()\n      .single();\n\n    if (episodeError) {\n      // Rollback: delete the quiz if episode creation fails\n      await supabaseAdmin.from('vsk_quizzes').delete().eq('id', quiz.id);\n      throw new Error(`Failed to create episode: ${episodeError.message}`);\n    }\n\n    // Step 3: Add sample questions to the quiz\n    const questions = [\n      {\n        quiz_id: quiz.id,\n        question_number: 1,\n        question_text: 'What is the main benefit of the unified podcast-quiz entity model?',\n        explanation: 'This tests understanding of the architectural changes',\n        rationale: 'The unified model eliminates conditional logic and ensures data integrity',\n        learning_outcome: 'Understand unified entity architecture'\n      },\n      {\n        quiz_id: quiz.id,\n        question_number: 2,\n        question_text: 'How does the one-to-one relationship improve the system?',\n        explanation: 'This tests knowledge of relational benefits',\n        rationale: 'One-to-one relationships simplify queries and prevent orphaned records',\n        learning_outcome: 'Analyze database relationship benefits'\n      }\n    ];\n\n    for (const questionData of questions) {\n      const { data: question, error: questionError } = await supabaseAdmin\n        .from('vsk_quiz_questions')\n        .insert(questionData)\n        .select()\n        .single();\n\n      if (questionError) {\n        throw new Error(`Failed to create question: ${questionError.message}`);\n      }\n\n      // Add answers for each question\n      const answers = [\n        { question_id: question.id, answer_letter: 'A', answer_text: 'Correct answer', is_correct: true },\n        { question_id: question.id, answer_letter: 'B', answer_text: 'Incorrect answer 1', is_correct: false },\n        { question_id: question.id, answer_letter: 'C', answer_text: 'Incorrect answer 2', is_correct: false },\n        { question_id: question.id, answer_letter: 'D', answer_text: 'Incorrect answer 3', is_correct: false }\n      ];\n\n      const { error: answersError } = await supabaseAdmin\n        .from('vsk_question_answers')\n        .insert(answers);\n\n      if (answersError) {\n        throw new Error(`Failed to create answers: ${answersError.message}`);\n      }\n    }\n\n    // Step 4: Fetch the complete unified entity\n    const { data: completeEntity, error: fetchError } = await supabaseAdmin\n      .from('vsk_podcast_episodes')\n      .select(`\n        id,\n        title,\n        description,\n        audio_src,\n        full_audio_src,\n        episode_number,\n        quiz_id,\n        is_published,\n        published_at,\n        slug,\n        created_at,\n        updated_at,\n        quiz:vsk_quizzes(\n          id,\n          title,\n          description,\n          category,\n          pass_percentage,\n          total_questions,\n          is_active,\n          questions:vsk_quiz_questions(\n            id,\n            question_number,\n            question_text,\n            explanation,\n            rationale,\n            learning_outcome,\n            answers:vsk_question_answers(\n              id,\n              answer_letter,\n              answer_text,\n              is_correct\n            )\n          )\n        )\n      `)\n      .eq('id', episode.id)\n      .single();\n\n    if (fetchError) {\n      throw new Error(`Failed to fetch complete entity: ${fetchError.message}`);\n    }\n\n    return res.status(201).json({\n      success: true,\n      message: 'Unified podcast-quiz entity created successfully',\n      data: {\n        unifiedEntity: completeEntity,\n        summary: {\n          episodeId: episode.id,\n          quizId: quiz.id,\n          questionsCreated: questions.length,\n          answersCreated: questions.length * 4\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('Unified creation failed:', error);\n    return res.status(500).json({\n      success: false,\n      error: 'Failed to create unified entity',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n}\n\nasync function testPodcastQuizRelationship(req: NextApiRequest, res: NextApiResponse) {\n  try {\n    // Test the relationship by fetching all episodes with their complete quiz data\n    const { data: episodes, error } = await supabaseAdmin\n      .from('vsk_podcast_episodes')\n      .select(`\n        id,\n        title,\n        quiz_id,\n        quiz:vsk_quizzes(\n          id,\n          title,\n          category,\n          total_questions,\n          questions:vsk_quiz_questions(\n            id,\n            question_number,\n            question_text\n          )\n        )\n      `)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      throw new Error(`Failed to test relationships: ${error.message}`);\n    }\n\n    // Validate that every episode has a quiz\n    const validation = episodes?.map(episode => ({\n      episodeId: episode.id,\n      episodeTitle: episode.title,\n      hasQuizId: !!episode.quiz_id,\n      hasQuizData: !!episode.quiz,\n      quizTitle: episode.quiz?.title || 'Missing',\n      questionCount: episode.quiz?.questions?.length || 0,\n      isValid: !!episode.quiz_id && !!episode.quiz\n    })) || [];\n\n    const allValid = validation.every(v => v.isValid);\n    const totalEpisodes = validation.length;\n    const validEpisodes = validation.filter(v => v.isValid).length;\n\n    return res.status(200).json({\n      success: true,\n      message: 'Relationship test completed',\n      data: {\n        summary: {\n          totalEpisodes,\n          validEpisodes,\n          invalidEpisodes: totalEpisodes - validEpisodes,\n          allValid,\n          successRate: totalEpisodes > 0 ? (validEpisodes / totalEpisodes) * 100 : 0\n        },\n        episodes: validation\n      }\n    });\n\n  } catch (error) {\n    console.error('Relationship test failed:', error);\n    return res.status(500).json({\n      success: false,\n      error: 'Failed to test relationships',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n}